---
// LanguageSwitcher component for bilingual navigation
// Provides client-side language switching with localStorage persistence

import type { Locale } from '../i18n/index.js';
import { getOppositeLocale, getLocalizedPath, getLocaleFromPath } from '../i18n/index.js';

interface Props {
  currentLocale: Locale;
  currentPath?: string;
  className?: string;
}

const { currentLocale, currentPath = '', className = '' } = Astro.props;

// Get the opposite locale for switching
const targetLocale = getOppositeLocale(currentLocale);

// Extract the page path from the current URL
const urlPath = Astro.url.pathname;
const pathSegments = urlPath.split('/').filter(Boolean);

// Remove locale prefix to get the page path
let pagePath = '';
if (currentLocale === 'ar' && pathSegments[0] === 'ar') {
  // For Arabic pages, remove the 'ar' prefix
  pagePath = pathSegments.slice(1).join('/');
} else if (currentLocale === 'en') {
  // For English pages, use the full path
  pagePath = pathSegments.join('/');
}

// Build the target URL for language switching
const targetPath = getLocalizedPath(targetLocale, pagePath);

// Language labels
const languageLabels = {
  en: 'English',
  ar: 'العربية'
};
---

<div class={`language-switcher ${className}`}>
  <button
    type="button"
    class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:text-primary-600 transition-colors duration-200 border border-gray-300 rounded-lg hover:border-primary-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
    data-target-locale={targetLocale}
    data-target-path={targetPath}
    data-page-path={pagePath}
    onclick="switchLanguage(this)"
  >
    <!-- Globe icon -->
    <svg 
      class="w-4 h-4" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"
      />
    </svg>
    
    <!-- Language label -->
    <span>{languageLabels[targetLocale]}</span>
    
    <!-- Arrow icon -->
    <svg 
      class="w-3 h-3 transition-transform duration-200" 
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M19 9l-7 7-7-7"
      />
    </svg>
  </button>
</div>

<script>
  // Client-side language switching functionality
  // This script handles localStorage persistence and navigation
  
  function switchLanguage(button: HTMLButtonElement) {
    const targetLocale = button.dataset.targetLocale;
    const targetPath = button.dataset.targetPath;
    const pagePath = button.dataset.pagePath;
    
    if (!targetLocale) {
      console.error('Missing target locale');
      return;
    }
    
    try {
      // Save user preference to localStorage
      localStorage.setItem('preferred-locale', targetLocale);
      
      // Build the correct target path
      let finalPath;
      if (targetLocale === 'ar') {
        finalPath = pagePath ? `/ar/${pagePath}` : '/ar';
      } else {
        finalPath = pagePath ? `/${pagePath}` : '/';
      }
      
      // Clean up the path
      finalPath = finalPath.replace(/\/+/g, '/').replace(/\/$/, '') || (targetLocale === 'ar' ? '/ar' : '/');
      
      // Navigate to the new locale
      window.location.href = finalPath;
    } catch (error) {
      console.error('Error switching language:', error);
      // Fallback: navigate to home page of target locale
      window.location.href = targetLocale === 'ar' ? '/ar' : '/';
    }
  }
  
  // Initialize locale preference on page load
  function initializeLocalePreference() {
    try {
      const preferredLocale = localStorage.getItem('preferred-locale');
      const currentUrl = window.location.pathname;
      const urlSegments = currentUrl.split('/').filter(Boolean);
      const currentLocale = urlSegments[0] === 'ar' ? 'ar' : 'en';
      
      // If user has a stored preference different from current URL locale, redirect
      if (preferredLocale && preferredLocale !== currentLocale) {
        const pathWithoutLocale = currentLocale === 'ar' ? urlSegments.slice(1).join('/') : urlSegments.join('/');
        let newPath;
        
        if (preferredLocale === 'ar') {
          newPath = `/ar/${pathWithoutLocale}`.replace(/\/+/g, '/').replace(/\/$/, '') || '/ar';
        } else {
          newPath = `/${pathWithoutLocale}`.replace(/\/+/g, '/').replace(/\/$/, '') || '/';
        }
        
        window.location.href = newPath;
      }
    } catch (error) {
      console.warn('Could not initialize locale preference:', error);
    }
  }
  
  // Run initialization when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLocalePreference);
  } else {
    initializeLocalePreference();
  }
  
  // Make switchLanguage globally available
  window.switchLanguage = switchLanguage;
</script>

<style>
  .language-switcher {
    position: relative;
  }
  
  .language-switcher button:hover svg:last-child {
    transform: rotate(180deg);
  }
  
  /* RTL adjustments */
  [dir="rtl"] .language-switcher button {
    flex-direction: row-reverse;
  }
  
  [dir="rtl"] .language-switcher svg:last-child {
    transform: scaleX(-1);
  }
  
  [dir="rtl"] .language-switcher button:hover svg:last-child {
    transform: scaleX(-1) rotate(180deg);
  }
</style>
